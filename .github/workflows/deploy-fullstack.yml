name: Deploy Fullstack

on:
  push:
    branches: [main, dev]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      HEALTHCHECK_BACKEND: "http://${{ secrets.SERVER_HOST }}/api/health"
      HEALTHCHECK_FRONTEND: "http://${{ secrets.SERVER_HOST }}/"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Ensure project path exists
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "sudo mkdir -p ${{ secrets.SERVER_PROJECT_PATH }} && sudo chown -R ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} ${{ secrets.SERVER_PROJECT_PATH }}"

      - name: Rsync all code to server
        run: |
          rsync -avz --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude 'frontend/genstoryai_frontend/node_modules' \
            --exclude '.github' \
            --exclude '*.db' \
            --exclude '*.sqlite3' \
            --exclude 'db_data' \
            --exclude 'data' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_PROJECT_PATH }}/

      - name: Update environment variables for production
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            cd ${{ secrets.SERVER_PROJECT_PATH }} &&
            sed -i 's|^ *- OPENAI_API_KEY=.*|      - OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}|' docker-compose.yml &&
            sed -i 's|^ *- OPENAI_BASE_URL=.*|      - OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}|' docker-compose.yml &&
            sed -i 's|^ *- OPENAI_MODEL=.*|      - OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}|' docker-compose.yml &&
            sed -i 's|^ *- DATABASE_URL=.*|      - DATABASE_URL=${{ secrets.DATABASE_URL }}|' docker-compose.yml &&
            sed -i 's|^ *- SECRET_KEY=.*|      - SECRET_KEY=${{ secrets.SECRET_KEY }}|' docker-compose.yml &&
            sed -i 's|^ *- ALGORITHM=.*|      - ALGORITHM=${{ secrets.ALGORITHM }}|' docker-compose.yml &&
            sed -i 's|^ *- ACCESS_TOKEN_EXPIRE_MINUTES=.*|      - ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}|' docker-compose.yml &&
            sed -i 's|^ *- SMTP_SERVER=.*|      - SMTP_SERVER=${{ secrets.SMTP_SERVER }}|' docker-compose.yml &&
            sed -i 's|^ *- SMTP_PORT=.*|      - SMTP_PORT=${{ secrets.SMTP_PORT }}|' docker-compose.yml &&
            sed -i 's|^ *- SMTP_USERNAME=.*|      - SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}|' docker-compose.yml &&
            sed -i 's|^ *- SMTP_PASSWORD=.*|      - SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}|' docker-compose.yml &&
            sed -i 's|^ *- MAIL_SIMULATE=.*|      - MAIL_SIMULATE=${{ secrets.MAIL_SIMULATE }}|' docker-compose.yml &&
            sed -i 's|^ *- SMTP_EMAIL_FROM_NAME=.*|      - SMTP_EMAIL_FROM_NAME=${{ secrets.SMTP_EMAIL_FROM_NAME }}|' docker-compose.yml &&
            sed -i 's|^ *- SMTP_EMAIL_FROM_ADDRESS=.*|      - SMTP_EMAIL_FROM_ADDRESS=${{ secrets.SMTP_EMAIL_FROM_ADDRESS }}|' docker-compose.yml &&
            sed -i 's|^ *- FRONTEND_URL=.*|      - FRONTEND_URL=${{ secrets.FRONTEND_URL }}|' docker-compose.yml
          "

      - name: Build and deploy on server (with backup)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            cd ${{ secrets.SERVER_PROJECT_PATH }} &&
            docker-compose down --rmi all || true &&
            docker-compose up -d --build
          "

      - name: Healthcheck Backend
        run: |
          sleep 30
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "curl -fsSL --max-time 10 $HEALTHCHECK_BACKEND"

      - name: Healthcheck Frontend
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "curl -fsSL --max-time 10 $HEALTHCHECK_FRONTEND"

      # - name: Rollback on failure
      #   if: failure()
      #   run: |
      #     echo "Healthcheck failed, rolling back..."
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
      #       cd ${{ secrets.SERVER_PROJECT_PATH }} &&
      #       docker-compose down || true &&
      #       docker-compose up -d
      #     " 